####################################################
# THIS IS THE NGINX CONFIG FOR ONE OF MY WEBSITES  #
#   IT GETS AN [A+] RATING ON THE SSL LABS TEST    #
#   ALSO, IT FORCES HSTS AND COVERS MOST CYPHERS   #
# -------====== BY NULL-DEV (Shadow) ======------- #
####################################################
#
# NOTE: FQDN stands for "Full Qualified Domain Name" and must be replaced with your own domain name
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name FQDN.com;
        return 301 https://FQDN.com$request_uri;
        location ~ /.well-known {
               allow all;
        }
}

server {
        #listen 80 default_server;
        listen 443 ssl default_server;
        spdy_keepalive_timeout 300;
        spdy_headers_comp 9;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header Strict-Transport-Security 'max-age=31536000; preload';
        includeSubDomains; preload';
        #listen [::]:80 default_server ipv6only=on;

        root /var/www/FQDN.com/public_html;
        index index.html index.htm index.php;

        # Make site accessible from http://localhost/
        server_name FQDN.com;
        ssl on;
        #ssl_buffer_size 1400;
        #ssl_session_tickets off;
        ssl_certificate /etc/letsencrypt/live/FQDN.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/FQDN.com/privkey.pem;
        # ANTI POODLE - shadow
        ssl_protocols TLSv1.2;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.4.4 8.8.8.8 valid=300s;
        resolver_timeout 10s;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 24h;
        # THIS SHOULD COVER MOST - Shadow
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        location /.well-known/acme-challenge {
                root /var/www/letsencrypt;
        }

        location ~ /(config\.php|common\.php|cache|files|images/avatars/upload|includes|store) {
                deny all;
                return 403;
        }
        
        # THIS IS FOR THE WOLTLAB BURNING BARD CMS SOFTWARE 
        location /wbb/ {
                index index.php;
                try_files $uri $uri/ /wbb/index.php?$uri&$args;
        }

        location ~* \.(gif|jpe?g|png|css)$ {
                expires   30d;
        }

        # NOTE: THIS IS THE LOCATION FOR PHP MY ADMIN WHICH INCLUDES AN NGINX AUTH
        location /PHPMYADMINLOCATION {
                auth_basic "Admin Login";
                auth_basic_user_file /etc/nginx/pma_pass;
        }

        # SUBDIRECTORY WITH NGINX AUTH
        location /devlog {
                auth_basic "Please enter the Developer Login [DEV USER]:";
                auth_basic_user_file /etc/nginx/pma2_pass;
        }

        # THIS NEEDS TO BE AN OWN SERVER (FOR GOGS) - Shadow
        # EDIT: UNUSED, HAS ITS OWN SUBDOMAIN NOW
        #location /git {
        #       proxy_pass http://localhost:3000/;
        #}

        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
        }
        
        # LETSENCRYPT
        location ~ /.well-known {
               allow all;
        }

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                index index.php;
                try_files $uri $uri/ /index.php?$uri&$args;
                #rewrite ^(.*)$ https://$http_host$request_uri redirect;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }
}
